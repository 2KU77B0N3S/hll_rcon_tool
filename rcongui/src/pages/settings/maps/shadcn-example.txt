# use-mobile.tsx

import { useState, useEffect } from "react"

export function useMobile() {
  const [isMobile, setIsMobile] = useState(false)

  useEffect(() => {
    const checkIfMobile = () => {
      setIsMobile(window.innerWidth < 1024)
    }

    // Initial check
    checkIfMobile()

    // Add event listener
    window.addEventListener("resize", checkIfMobile)

    // Clean up
    return () => {
      window.removeEventListener("resize", checkIfMobile)
    }
  }, [])

  return isMobile
}

=================================

# map-manager.tsx

import { useState, useEffect, useRef } from "react"
import {
  Search,
  Filter,
  X,
  Plus,
  Trash2,
  MapPin,
  GripVertical,
  Save,
  AlertTriangle,
  Clock,
  CheckCircle2,
  Play,
} from "lucide-react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { useToast } from "@/hooks/use-toast"
import { useMobile } from "@/hooks/use-mobile"
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
  type DragEndEvent,
} from "@dnd-kit/core"
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  useSortable,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable"
import { CSS } from "@dnd-kit/utilities"

// Map data
const mapData = [
  {
    id: 1,
    name: "Carentan",
    image: "/placeholder.svg?height=200&width=300",
    modes: ["Warfare", "Offensive US", "Offensive GER", "Skirmish"],
    weather: ["Day", "Night", "Fog"],
  },
  {
    id: 2,
    name: "Foy",
    image: "/placeholder.svg?height=200&width=300",
    modes: ["Warfare", "Offensive US", "Offensive GER"],
    weather: ["Day", "Snow", "Blizzard"],
  },
  {
    id: 3,
    name: "Kursk",
    image: "/placeholder.svg?height=200&width=300",
    modes: ["Warfare", "Offensive RUS", "Offensive GER"],
    weather: ["Day", "Fog", "Rain"],
  },
  {
    id: 4,
    name: "Omaha Beach",
    image: "/placeholder.svg?height=200&width=300",
    modes: ["Warfare", "Offensive US"],
    weather: ["Day", "Dawn"],
  },
  {
    id: 5,
    name: "Purple Heart Lane",
    image: "/placeholder.svg?height=200&width=300",
    modes: ["Warfare", "Offensive US", "Offensive GER"],
    weather: ["Day", "Night", "Fog"],
  },
  {
    id: 6,
    name: "Stalingrad",
    image: "/placeholder.svg?height=200&width=300",
    modes: ["Warfare", "Offensive RUS", "Offensive GER"],
    weather: ["Day", "Night", "Snow"],
  },
  {
    id: 7,
    name: "Utah Beach",
    image: "/placeholder.svg?height=200&width=300",
    modes: ["Warfare", "Offensive US"],
    weather: ["Day", "Dawn", "Fog"],
  },
  {
    id: 8,
    name: "Hurtgen Forest",
    image: "/placeholder.svg?height=200&width=300",
    modes: ["Warfare", "Offensive US", "Offensive GER"],
    weather: ["Day", "Fog", "Rain"],
  },
]

// Get unique modes and weather conditions
const allModes = Array.from(new Set(mapData.flatMap((map) => map.modes))).sort()
const allWeather = Array.from(new Set(mapData.flatMap((map) => map.weather))).sort()

type MapVariant = {
  id: number
  mapId: number
  name: string
  image: string
  mode: string
  weather: string
  rotationId?: string
}

// Sortable Item Component
function SortableRotationItem({
  item,
  onRemove,
  onSetCurrent,
  isCurrentMap,
}: { 
  item: MapVariant
  onRemove: (id: string) \
  onSetCurrent: (item: MapVariant) => void
  isCurrentMap: boolean
}) {
  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({
    id: item.rotationId || item.id.toString(),
  })

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    zIndex: isDragging ? 10 : 1,
    opacity: isDragging ? 0.8 : 1,
  }

  return (
    <div
      ref={setNodeRef}
      style={style}
      className={`flex items-center justify-between p-3 rounded-md ${
        isCurrentMap ? "bg-emerald-900/30 border border-emerald-500/50" : "bg-zinc-800"
      } ${isDragging ? "border border-zinc-500" : ""}`}
    >
      <div className="flex items-center gap-3">
        <div
          {...attributes}
          {...listeners}
          className="h-8 w-8 flex items-center justify-center cursor-grab active:cursor-grabbing text-zinc-400 hover:text-zinc-100"
        >
          <GripVertical className="h-5 w-5" />
        </div>
        <div className="h-10 w-10 rounded overflow-hidden flex-shrink-0">
          <img src={item.image || "/placeholder.svg"} alt={item.name} className="h-full w-full object-cover" />
        </div>
        <div>
          <div className="flex items-center gap-2">
            <h4 className="font-medium">{item.name}</h4>
            {isCurrentMap && <Badge className="bg-emerald-600 text-white text-xs">Current</Badge>}
          </div>
          <div className="flex gap-2 mt-1">
            <Badge variant="outline" className="text-xs bg-zinc-700">
              {item.mode}
            </Badge>
            <Badge variant="outline" className="text-xs bg-zinc-700">
              {item.weather}
            </Badge>
          </div>
        </div>
      </div>
      <div className="flex gap-1">
        {!isCurrentMap && (
          <Button
            variant="ghost"
            size="icon"
            onClick={() => onSetCurrent(item)}
            className="h-8 w-8 text-zinc-400 hover:text-emerald-400"
            title="Set as current map"
          >
            <Play className="h-4 w-4" />
          </Button>
        )}
        <Button
          variant="ghost"
          size="icon"
          onClick={() => onRemove(item.rotationId || item.id.toString())}
          className="h-8 w-8 text-zinc-400 hover:text-red-400"
        >
          <X className="h-4 w-4" />
        </Button>
      </div>
    </div>
  )
}

// Map List Item Component
function MapListItem({
  variant,
  onAddToRotation,
}: {
  variant: MapVariant
  onAddToRotation: (variant: MapVariant) => void
}) {
  return (
    <div className="flex items-center justify-between p-3 bg-zinc-800 rounded-md hover:bg-zinc-700/50 transition-colors">
      <div className="flex items-center gap-3">
        <div className="h-12 w-12 rounded overflow-hidden flex-shrink-0">
          <img src={variant.image || "/placeholder.svg"} alt={variant.name} className="h-full w-full object-cover" />
        </div>
        <div>
          <h3 className="font-medium">{variant.name}</h3>
          <div className="flex flex-wrap gap-2 mt-1">
            <Badge variant="outline" className="text-xs bg-zinc-700">
              {variant.mode}
            </Badge>
            <Badge variant="outline" className="text-xs bg-zinc-700">
              {variant.weather}
            </Badge>
          </div>
        </div>
      </div>
      <Button
        onClick={() => onAddToRotation(variant)}
        size="sm"
        className="flex-shrink-0"
        aria-label={`Add ${variant.name} to rotation`}
      >
        <Plus className="h-4 w-4 mr-2" />
        <span className="hidden sm:inline">Add</span>
      </Button>
    </div>
  )
}

// Current Map Display Component
function CurrentMapDisplay({ map }: { map: MapVariant | null }) {
  if (!map) return null

  return (
    <div className="bg-emerald-900/30 border border-emerald-500/50 rounded-md p-4 mb-4">
      <div className="flex items-center gap-3">
        <div className="h-14 w-14 rounded overflow-hidden flex-shrink-0">
          <img src={map.image || "/placeholder.svg"} alt={map.name} className="h-full w-full object-cover" />
        </div>
        <div>
          <div className="flex items-center gap-2">
            <Badge className="bg-emerald-600 text-white">Current Map</Badge>
          </div>
          <h3 className="text-lg font-bold mt-1">{map.name}</h3>
          <div className="flex gap-2 mt-1">
            <Badge variant="outline" className="bg-zinc-700">
              {map.mode}
            </Badge>
            <Badge variant="outline" className="bg-zinc-700">
              {map.weather}
            </Badge>
          </div>
        </div>
      </div>
    </div>
  )
}

// Countdown Timer Component
function CountdownTimer({ seconds }: { seconds: number }) {
  return (
    <div className="flex items-center gap-1 text-amber-300">
      <Clock className="h-4 w-4" />
      <span className="font-mono">{seconds}s</span>
    </div>
  )
}

export default function MapRotationBuilder() {
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedMode, setSelectedMode] = useState<string>("")
  const [selectedWeather, setSelectedWeather] = useState<string>("")
  const [mapVariants, setMapVariants] = useState<MapVariant[]>([])
  const [rotation, setRotation] = useState<MapVariant[]>([])
  const [activeTab, setActiveTab] = useState("maps")
  const [countdown, setCountdown] = useState(60)
  const [currentMap, setCurrentMap] = useState<MapVariant | null>(null)
  const [mapToConfirm, setMapToConfirm] = useState<MapVariant | null>(null)
  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false)
  const { toast } = useToast()
  const isMobile = useMobile()
  const intervalRef = useRef<NodeJS.Timeout | null>(null)

  // Set up DnD sensors
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    }),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    }),
  )

  // Generate all map variants on component mount
  useEffect(() => {
    const variants: MapVariant[] = []
    let variantId = 1

    mapData.forEach((map) => {
      map.modes.forEach((mode) => {
        map.weather.forEach((weather) => {
          variants.push({
            id: variantId++,
            mapId: map.id,
            name: map.name,
            image: map.image,
            mode,
            weather,
          })
        })
      })
    })

    setMapVariants(variants)
  }, [])

  // Set up countdown timer and automatic rotation change
  useEffect(() => {
    // Start the countdown
    intervalRef.current = setInterval(() => {
      setCountdown((prev) => {
        if (prev <= 1) {
          // Simulate automatic rotation change
          const randomVariants = [...mapVariants]
            .sort(() => 0.5 - Math.random())
            .slice(0, Math.floor(Math.random() * 5) + 3)
            .map((variant) => ({
              ...variant,
              rotationId: `${variant.id}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            }))

          setRotation(randomVariants)
          toast({
            title: "Automatic rotation change",
            description: "The map rotation has been automatically updated by the system.",
            variant: "destructive",
          })
          return 60 // Reset to 60 seconds
        }
        return prev - 1
      })
    }, 1000)

    // Clean up interval on unmount
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
      }
    }
  }, [mapVariants, toast])

  // Filter map variants based on search term and filters
  const filteredMapVariants = mapVariants.filter((variant) => {
    const matchesSearch = variant.name.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesMode = selectedMode ? variant.mode === selectedMode : true
    const matchesWeather = selectedWeather ? variant.weather === selectedWeather : true
    return matchesSearch && matchesMode && matchesWeather
  })

  // Add map to rotation
  const addToRotation = (variant: MapVariant) => {
    // Create a copy of the variant with a unique rotationId
    const variantWithUniqueId = {
      ...variant,
      rotationId: `${variant.id}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    }

    setRotation([...rotation, variantWithUniqueId])
    toast({
      title: "Map added to rotation",
      description: `${variant.name} (${variant.mode}, ${variant.weather})`,
    })
  }

  // Remove map from rotation
  const removeFromRotation = (rotationId: string) => {
    // Check if removing the current map
    if (currentMap && currentMap.rotationId === rotationId) {
      setCurrentMap(null)
    }

    setRotation(rotation.filter((item) => item.rotationId !== rotationId))
    toast({
      title: "Map removed from rotation",
      description: "Map has been removed from your rotation",
    })
  }

  // Clear all filters
  const clearFilters = () => {
    setSearchTerm("")
    setSelectedMode("")
    setSelectedWeather("")
  }

  // Clear rotation
  const clearRotation = () => {
    setRotation([])
    setCurrentMap(null)
    toast({
      title: "Rotation cleared",
      description: "All maps have been removed from your rotation",
    })
  }

  // Save rotation
  const saveRotation = () => {
    // In a real application, this would save to a database or localStorage
    // For now, we'll just show a toast notification
    toast({
      title: "Rotation saved",
      description: `Saved ${rotation.length} maps to your rotation.`,
    })
  }

  // Handle setting current map
  const handleSetCurrentMap = (map: MapVariant) => {
    setMapToConfirm(map)
    setConfirmDialogOpen(true)
  }

  // Confirm setting current map
  const confirmSetCurrentMap = () => {
    if (mapToConfirm) {
      setCurrentMap(mapToConfirm)
      setConfirmDialogOpen(false)
      toast({
        title: "Current map set",
        description: `${mapToConfirm.name} (${mapToConfirm.mode}, ${mapToConfirm.weather}) is now the current map.`,
      })
    }
  }

  // Handle drag end event
  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event

    if (over && active.id !== over.id) {
      setRotation((items) => {
        const oldIndex = items.findIndex((item) => (item.rotationId || item.id.toString()) === active.id)
        const newIndex = items.findIndex((item) => (item.rotationId || item.id.toString()) === over.id)

        const newRotation = arrayMove(items, oldIndex, newIndex)

        toast({
          title: "Map rotation updated",
          description: "The order of maps has been changed",
        })

        return newRotation
      })
    }
  }

  return (
    <div className="grid grid-cols-1 lg:grid-cols-12 gap-6">
      {/* Auto-rotation Alert */}
      <Alert className="col-span-full bg-amber-900/30 border-amber-500/50 text-amber-100">
        <AlertTriangle className="h-5 w-5 text-amber-400" />
        <div className="flex justify-between w-full items-center">
          <div>
            <AlertTitle className="text-amber-300">Automatic Rotation Active</AlertTitle>
            <AlertDescription className="text-amber-200/80">
              The system will automatically change the map rotation every minute, overriding any saved changes.
            </AlertDescription>
          </div>
          <CountdownTimer seconds={countdown} />
        </div>
      </Alert>

      {/* Current Map Display (Desktop) */}
      {currentMap && !isMobile && (
        <div className="col-span-full">
          <CurrentMapDisplay map={currentMap} />
        </div>
      )}

      {/* Mobile Tabs */}
      {isMobile && (
        <Tabs value={activeTab} onValueChange={setActiveTab} className="col-span-1 lg:hidden">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="maps">Maps</TabsTrigger>
            <TabsTrigger value="rotation">Rotation ({rotation.length})</TabsTrigger>
          </TabsList>

          {/* Current Map Display (Mobile) */}
          {currentMap && (
            <div className="mt-4">
              <CurrentMapDisplay map={currentMap} />
            </div>
          )}

          <TabsContent value="maps" className="mt-4">
            <div className="space-y-6">
              {/* Search and Filters */}
              <div className="space-y-4">
                <div className="relative">
                  <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-zinc-500" />
                  <Input
                    type="search"
                    placeholder="Search maps..."
                    className="pl-8 bg-zinc-800 border-zinc-700"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>

                <div className="flex flex-wrap gap-2">
                  <Sheet>
                    <SheetTrigger asChild>
                      <Button variant="outline" size="sm" className="h-9">
                        <Filter className="h-4 w-4 mr-2" />
                        Filters
                        {(selectedMode || selectedWeather) && (
                          <Badge variant="secondary" className="ml-2 bg-zinc-700">
                            {(selectedMode ? 1 : 0) + (selectedWeather ? 1 : 0)}
                          </Badge>
                        )}
                      </Button>
                    </SheetTrigger>
                    <SheetContent side="bottom" className="bg-zinc-900 text-zinc-100">
                      <SheetHeader>
                        <SheetTitle className="text-zinc-100">Filters</SheetTitle>
                      </SheetHeader>
                      <div className="grid gap-4 py-4">
                        <div className="space-y-2">
                          <label className="text-sm font-medium">Game Mode</label>
                          <Select value={selectedMode} onValueChange={setSelectedMode}>
                            <SelectTrigger className="bg-zinc-800 border-zinc-700">
                              <SelectValue placeholder="All game modes" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-800 border-zinc-700">
                              <SelectItem value="all">All game modes</SelectItem>
                              {allModes.map((mode) => (
                                <SelectItem key={mode} value={mode}>
                                  {mode}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium">Weather</label>
                          <Select value={selectedWeather} onValueChange={setSelectedWeather}>
                            <SelectTrigger className="bg-zinc-800 border-zinc-700">
                              <SelectValue placeholder="All weather" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-800 border-zinc-700">
                              <SelectItem value="all">All weather</SelectItem>
                              {allWeather.map((weather) => (
                                <SelectItem key={weather} value={weather}>
                                  {weather}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        <Button variant="outline" onClick={clearFilters} className="mt-2">
                          <X className="h-4 w-4 mr-2" />
                          Clear Filters
                        </Button>
                      </div>
                    </SheetContent>
                  </Sheet>

                  {selectedMode && (
                    <Badge variant="secondary" className="bg-zinc-800">
                      {selectedMode}
                      <button onClick={() => setSelectedMode("")} className="ml-1 hover:text-zinc-400">
                        <X className="h-3 w-3" />
                      </button>
                    </Badge>
                  )}

                  {selectedWeather && (
                    <Badge variant="secondary" className="bg-zinc-800">
                      {selectedWeather}
                      <button onClick={() => setSelectedWeather("")} className="ml-1 hover:text-zinc-400">
                        <X className="h-3 w-3" />
                      </button>
                    </Badge>
                  )}
                </div>
              </div>

              {/* Map List */}
              <div className="space-y-2">
                {filteredMapVariants.length > 0 ? (
                  filteredMapVariants.map((variant) => (
                    <MapListItem key={variant.id} variant={variant} onAddToRotation={addToRotation} />
                  ))
                ) : (
                  <div className="text-center py-10 text-zinc-400">
                    <MapPin className="h-12 w-12 mx-auto mb-4 opacity-50" />
                    <h3 className="text-lg font-medium mb-1">No maps found</h3>
                    <p>Try adjusting your filters or search term</p>
                  </div>
                )}
              </div>
            </div>
          </TabsContent>
          <TabsContent value="rotation" className="mt-4">
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-xl font-bold">Map Rotation ({rotation.length})</h2>
                <div className="flex gap-2">
                  {rotation.length > 0 && (
                    <>
                      <Button variant="default" size="sm" onClick={saveRotation}>
                        <Save className="h-4 w-4 mr-2" />
                        Save
                      </Button>
                      <Button variant="destructive" size="sm" onClick={clearRotation}>
                        <Trash2 className="h-4 w-4 mr-2" />
                        Clear
                      </Button>
                    </>
                  )}
                </div>
              </div>

              {rotation.length > 0 ? (
                <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
                  <SortableContext
                    items={rotation.map((item) => item.rotationId || item.id.toString())}
                    strategy={verticalListSortingStrategy}
                  >
                    <div className="space-y-3">
                      {rotation.map((item) => (
                        <SortableRotationItem
                          key={item.rotationId || item.id.toString()}
                          item={item}
                          onRemove={removeFromRotation}
                          onSetCurrent={handleSetCurrentMap}
                          isCurrentMap={currentMap?.rotationId === item.rotationId}
                        />
                      ))}
                    </div>
                  </SortableContext>
                </DndContext>
              ) : (
                <div className="text-center py-10 text-zinc-400 bg-zinc-800/50 rounded-lg">
                  <MapPin className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <h3 className="text-lg font-medium mb-1">No maps in rotation</h3>
                  <p>Add maps to build your rotation</p>
                </div>
              )}
            </div>
          </TabsContent>
        </Tabs>
      )}

      {/* Desktop Layout */}
      <div className={`${isMobile ? "hidden" : "block"} col-span-1 lg:col-span-8`}>
        {/* Search and Filters */}
        <div className="space-y-4 mb-6">
          <div className="relative">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-zinc-500" />
            <Input
              type="search"
              placeholder="Search maps..."
              className="pl-8 bg-zinc-800 border-zinc-700"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          <div className="flex flex-wrap gap-2">
            <div className="w-48">
              <Select value={selectedMode} onValueChange={setSelectedMode}>
                <SelectTrigger className="bg-zinc-800 border-zinc-700">
                  <SelectValue placeholder="Game Mode" />
                </SelectTrigger>
                <SelectContent className="bg-zinc-800 border-zinc-700">
                  <SelectItem value="all">All game modes</SelectItem>
                  {allModes.map((mode) => (
                    <SelectItem key={mode} value={mode}>
                      {mode}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="w-48">
              <Select value={selectedWeather} onValueChange={setSelectedWeather}>
                <SelectTrigger className="bg-zinc-800 border-zinc-700">
                  <SelectValue placeholder="Weather" />
                </SelectTrigger>
                <SelectContent className="bg-zinc-800 border-zinc-700">
                  <SelectItem value="all">All weather</SelectItem>
                  {allWeather.map((weather) => (
                    <SelectItem key={weather} value={weather}>
                      {weather}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {(selectedMode || selectedWeather) && (
              <Button variant="outline" size="sm" onClick={clearFilters} className="h-9">
                <X className="h-4 w-4 mr-2" />
                Clear Filters
              </Button>
            )}
          </div>
        </div>

        {/* Map List */}
        <div className="space-y-2">
          {filteredMapVariants.length > 0 ? (
            filteredMapVariants.map((variant) => (
              <MapListItem key={variant.id} variant={variant} onAddToRotation={addToRotation} />
            ))
          ) : (
            <div className="text-center py-10 text-zinc-400">
              <MapPin className="h-12 w-12 mx-auto mb-4 opacity-50" />
              <h3 className="text-lg font-medium mb-1">No maps found</h3>
              <p>Try adjusting your filters or search term</p>
            </div>
          )}
        </div>
      </div>

      {/* Rotation Sidebar - Desktop Only */}
      <div className={`${isMobile ? "hidden" : "block"} col-span-1 lg:col-span-4`}>
        <Card className="bg-zinc-800 border-zinc-700 sticky top-4">
          <CardHeader>
            <CardTitle className="flex justify-between items-center">
              <span>Map Rotation ({rotation.length})</span>
              <div className="flex gap-2">
                {rotation.length > 0 && (
                  <Button variant="destructive" size="sm" onClick={clearRotation}>
                    <Trash2 className="h-4 w-4 mr-2" />
                    Clear
                  </Button>
                )}
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-[calc(100vh-280px)] pr-4">
              {rotation.length > 0 ? (
                <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
                  <SortableContext
                    items={rotation.map((item) => item.rotationId || item.id.toString())}
                    strategy={verticalListSortingStrategy}
                  >
                    <div className="space-y-3">
                      {rotation.map((item) => (
                        <SortableRotationItem
                          key={item.rotationId || item.id.toString()}
                          item={item}
                          onRemove={removeFromRotation}
                          onSetCurrent={handleSetCurrentMap}
                          isCurrentMap={currentMap?.rotationId === item.rotationId}
                        />
                      ))}
                    </div>
                  </SortableContext>
                </DndContext>
              ) : (
                <div className="text-center py-10 text-zinc-400">
                  <MapPin className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <h3 className="text-lg font-medium mb-1">No maps in rotation</h3>
                  <p>Add maps to build your rotation</p>
                </div>
              )}
            </ScrollArea>
          </CardContent>
          {rotation.length > 0 && (
            <CardFooter className="border-t border-zinc-700 pt-4">
              <Button onClick={saveRotation} className="w-full">
                <Save className="h-4 w-4 mr-2" />
                Save Rotation
              </Button>
            </CardFooter>
          )}
        </Card>
      </div>

      {/* Confirmation Dialog */}
      <Dialog open={confirmDialogOpen} onOpenChange={setConfirmDialogOpen}>
        <DialogContent className="bg-zinc-900 text-zinc-100 border-zinc-700">
          <DialogHeader>
            <DialogTitle>Set Current Map</DialogTitle>
            <DialogDescription className="text-zinc-400">
              Are you sure you want to set {mapToConfirm?.name} ({mapToConfirm?.mode}, {mapToConfirm?.weather}) as the
              current active map?
            </DialogDescription>
          </DialogHeader>
          {mapToConfirm && (
            <div className="flex items-center gap-3 p-3 bg-zinc-800 rounded-md">
              <div className="h-12 w-12 rounded overflow-hidden flex-shrink-0">
                <img
                  src={mapToConfirm.image || "/placeholder.svg"}
                  alt={mapToConfirm.name}
                  className="h-full w-full object-cover"
                />
              </div>
              <div>
                <h3 className="font-medium">{mapToConfirm.name}</h3>
                <div className="flex flex-wrap gap-2 mt-1">
                  <Badge variant="outline" className="text-xs bg-zinc-700">
                    {mapToConfirm.mode}
                  </Badge>
                  <Badge variant="outline" className="text-xs bg-zinc-700">
                    {mapToConfirm.weather}
                  </Badge>
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            <Button variant="outline" onClick={() => setConfirmDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={confirmSetCurrentMap} className="bg-emerald-600 hover:bg-emerald-700">
              <CheckCircle2 className="h-4 w-4 mr-2" />
              Confirm
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
